"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8412],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(96540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},31955:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"testing/unit-testing","title":"Unit tests","description":"Testing Framework","source":"@site/docs/testing/unit-testing.mdx","sourceDirName":"testing","slug":"/testing/unit-testing","permalink":"/project-collabagent01/docs/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-collabagent01/edit/main/documentation/docs/testing/unit-testing.mdx","tags":[],"version":"current","lastUpdatedBy":"Jaryn Hernandez","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Test Procedures","permalink":"/project-collabagent01/docs/category/test-procedures"},"next":{"title":"Integration tests","permalink":"/project-collabagent01/docs/testing/integration-testing"}}');var r=s(74848),i=s(28453),o=s(41306);function a(e){const t={blockquote:"blockquote",h2:"h2",h3:"h3",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"test-coverage-report",children:"Test Coverage Report"}),"\n",(0,r.jsx)(t.p,{children:"This coverage report is automatically generated on every pull request against main with passing tests in our GitHub Actions CI/CD Pipeline."}),"\n",(0,r.jsx)(t.h3,{id:"overall-coverage-summary",children:"Overall Coverage Summary"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Metric"}),(0,r.jsx)(t.th,{children:"Coverage"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Statements"})}),(0,r.jsx)(t.td,{children:"45.74%"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Branches"})}),(0,r.jsx)(t.td,{children:"46.30%"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Functions"})}),(0,r.jsx)(t.td,{children:"38.52%"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Lines"})}),(0,r.jsx)(t.td,{children:"45.74%"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"coverage-details",children:"Coverage Details"}),"\n",(0,r.jsx)(t.p,{children:"The detailed coverage report shows which parts of the code are tested and which need more test coverage. This helps ensure code quality and reliability."}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Note: This report updates automatically when CI runs tests with coverage."}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}const c={sidebar_position:1},d="Unit tests",h={},u=[{value:"Testing Framework",id:"testing-framework",level:2},{value:"Key Features:",id:"key-features",level:2},{value:"Suitability",id:"suitability",level:2},{value:"Overall Coverage Summary",id:"overall-coverage-summary",level:2},{value:"Test Coverage Report",id:"test-coverage-report",level:2},{value:"Overall Coverage Summary",id:"overall-coverage-summary",level:3},{value:"Coverage Details",id:"coverage-details",level:3}];function p(e){const t={h1:"h1",h2:"h2",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"unit-tests",children:"Unit tests"})}),"\n",(0,r.jsx)(t.h2,{id:"testing-framework",children:"Testing Framework"}),"\n",(0,r.jsx)(t.p,{children:"We chose Jest as the testing framework because it works well with our TypeScript and JavaScript codebase, is easy to set up, and has built-in support for mocking and stubbing."}),"\n",(0,r.jsx)(t.h2,{id:"key-features",children:"Key Features:"}),"\n",(0,r.jsx)(t.p,{children:"Mocking: Can fake modules and VS Code APIs so tests run on their own."}),"\n",(0,r.jsx)(t.p,{children:"Auto Test Discovery: Finds and runs all test files automatically."}),"\n",(0,r.jsx)(t.p,{children:"Assertions: Check results, function calls, and objects easily."}),"\n",(0,r.jsx)(t.p,{children:"Code Coverage: Shows what parts of the code are tested."}),"\n",(0,r.jsx)(t.p,{children:"Async Support: Works with async/await for things like team creation."}),"\n",(0,r.jsx)(t.p,{children:"Test Isolation: Resets mocks and sets up fresh instances before each test."}),"\n",(0,r.jsx)(t.h2,{id:"suitability",children:"Suitability"}),"\n",(0,r.jsx)(t.p,{children:"Handles complex dependencies like VS Code APIs."}),"\n",(0,r.jsx)(t.p,{children:"Supports async operations without extra setup."}),"\n",(0,r.jsx)(t.p,{children:"Works well with TypeScript using ts-jest."}),"\n",(0,r.jsx)(t.p,{children:"Good for VS Code extension testing (webviews, commands, extension lifecycle)."}),"\n",(0,r.jsx)(t.p,{children:"Easy to use in CI/CD pipelines."}),"\n",(0,r.jsx)(t.h2,{id:"overall-coverage-summary",children:"Overall Coverage Summary"}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)("a",{href:(0,o.Ay)("/test-coverage/index.html"),target:"_blank",rel:"noopener noreferrer",children:"View Detailed Coverage Report"})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);