"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[5881],{85443:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-collabagent01/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-collabagent01/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-collabagent01/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-collabagent01/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions","href":"/project-collabagent01/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false},{"type":"link","label":"general-requirements","href":"/project-collabagent01/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false}],"href":"/project-collabagent01/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"design","href":"/project-collabagent01/docs/system-architecture/design","docId":"system-architecture/design","unlisted":false},{"type":"link","label":"Development Environment","href":"/project-collabagent01/docs/system-architecture/development-environment","docId":"system-architecture/development-environment","unlisted":false},{"type":"link","label":"Version Control","href":"/project-collabagent01/docs/system-architecture/version-control","docId":"system-architecture/version-control","unlisted":false}],"href":"/project-collabagent01/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Design Document - Part II API","href":"/project-collabagent01/docs/api-specification/design-api-intro","docId":"api-specification/design-api-intro","unlisted":false},{"type":"link","label":"API 1 - Swagger Petstore","href":"/project-collabagent01/docs/api-specification/openapi-spec","docId":"api-specification/openapi-spec","unlisted":false},{"type":"link","label":"CalculatorModel.java","href":"/project-collabagent01/docs/api-specification/calculator-model-generated","docId":"api-specification/calculator-model-generated","unlisted":false}],"href":"/project-collabagent01/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Unit tests","href":"/project-collabagent01/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false},{"type":"link","label":"Integration tests","href":"/project-collabagent01/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/project-collabagent01/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false}],"href":"/project-collabagent01/docs/category/test-procedures"}]},"docs":{"api-specification/calculator-model-generated":{"id":"api-specification/calculator-model-generated","title":"CalculatorModel.java","description":"(generated using Javadoc to Markdown)","sidebar":"docsSidebar"},"api-specification/design-api-intro":{"id":"api-specification/design-api-intro","title":"Design Document - Part II API","description":"What should be in this section.","sidebar":"docsSidebar"},"api-specification/openapi-spec":{"id":"api-specification/openapi-spec","title":"API 1 - Swagger Petstore","description":"API Specification from openapi.yml","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"CollabAgent01","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"general-requirements","description":"Team Members Will Need","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"The system starts when a user installs the CollabAgent extension in VS Code. The extension provides two main features: Live Share and Agent01. To use Live Share, the extension checks whether the required third-party Live Share extension is already installed in VS Code. If it isn\u2019t, the system installs it automatically so the user can start using that feature. The Agent01 feature requires users to be logged in, and login is handled through OAuth, which allows sign-in with Google. If both login and installing of live share extension is done, the extension activates two main parts, Live Share (SYN) for session sharing, team activity, and chat, and Agent 01 (ASYN) for tracking tasks, changes, and lobby creation.","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"CollabAgent is an AI Agent Bot extension for collaborative coding that helps teams stay aligned with meaningful updates. It works in two modes: async, where the Agent creates commit-based summaries powered by Gemini or ChatGPT, and sync, where Live Share provides real-time co-editing and file sharing. The Agent remains usable in both modes, giving teams filtered, human-readable updates without noise or constant monitoring. By combining commit summaries, real-time editing, and on-demand insights, CollabAgent reduces duplicate work and improves team awareness.","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions","description":"Use Case 1 - Real-Time Code Synchronization Setup","sidebar":"docsSidebar"},"system-architecture/design":{"id":"system-architecture/design","title":"design","description":"Component Overview","sidebar":"docsSidebar"},"system-architecture/development-environment":{"id":"system-architecture/development-environment","title":"Development Environment","description":"Required Hardware","sidebar":"docsSidebar"},"system-architecture/version-control":{"id":"system-architecture/version-control","title":"Version Control","description":"This project is managed over Git and GitHub, which will use the following components","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance test","description":"Demonstration of all of the functional and non-functional requirements. This can be a combination of automated tests derived from the use-cases (user stories) and manual tests with recorded observation of the results.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit tests","description":"For each method, one or more test cases.","sidebar":"docsSidebar"}}}}')}}]);