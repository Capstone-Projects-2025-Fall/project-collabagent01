"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6833],{28453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function t(e){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:a},e.children)}},60337:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tutorial-basics/mermaid","title":"Mermaid Diagrams (UML)","description":"Using Mermaid to create diagrams and visualizations directly in Docusaurus offers significant advantages over static images. With Mermaid, your diagrams are written as code, making them easy to version control, review, and update alongside your documentation. This approach ensures your diagrams always stay in sync with your project, reduces maintenance overhead, and eliminates the hassle of regenerating and uploading new images for every change. As your project evolves, updating a diagram is as simple as editing a few lines of text, making your documentation more agile, consistent, and future-proof.","source":"@site/tutorial/tutorial-basics/mermaid.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/mermaid","permalink":"/project-collabagent01/tutorial/tutorial-basics/mermaid","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Mermaid Diagrams (UML)","sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Markdown Features","permalink":"/project-collabagent01/tutorial/tutorial-basics/markdown-features"},"next":{"title":"Set Environment Variables","permalink":"/project-collabagent01/tutorial/tutorial-basics/set-environment-variables"}}');var r=n(74848),s=n(28453);const t={title:"Mermaid Diagrams (UML)",sidebar_position:5},o="Mermaid Diagrams (UML) \ud83e\udddc\u200d\u2640\ufe0f",l={},d=[{value:"Structural",id:"structural",level:2},{value:"Class Diagrams",id:"class-diagrams",level:3},{value:"Entity-Relationship Diagrams (not technically UML, but widely used in software design)",id:"entity-relationship-diagrams-not-technically-uml-but-widely-used-in-software-design",level:3},{value:"Behavioral",id:"behavioral",level:2},{value:"Sequence Diagram",id:"sequence-diagram",level:3},{value:"State Diagrams",id:"state-diagrams",level:3},{value:"Use Case Diagrams",id:"use-case-diagrams",level:3},{value:"Non UML Examples (Architectural Diagrams)",id:"non-uml-examples-architectural-diagrams",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"mermaid-diagrams-uml-\ufe0f",children:"Mermaid Diagrams (UML) \ud83e\udddc\u200d\u2640\ufe0f"})}),"\n",(0,r.jsxs)(a.p,{children:["Using ",(0,r.jsx)(a.a,{href:"https://mermaid-js.github.io/mermaid/#/",children:"Mermaid"})," to create diagrams and visualizations directly in Docusaurus offers significant advantages over static images. With Mermaid, your diagrams are written as code, making them easy to version control, review, and update alongside your documentation. This approach ensures your diagrams always stay in sync with your project, reduces maintenance overhead, and eliminates the hassle of regenerating and uploading new images for every change. As your project evolves, updating a diagram is as simple as editing a few lines of text, making your documentation more agile, consistent, and future-proof.\nMermaid supports a variety of diagram types, including flowcharts, sequence diagrams, class diagrams, state diagrams, and more. Below are some examples of how to create different types of UML diagrams using Mermaid syntax."]}),"\n",(0,r.jsx)(a.h2,{id:"structural",children:"Structural"}),"\n",(0,r.jsx)(a.h3,{id:"class-diagrams",children:"Class Diagrams"}),"\n",(0,r.jsx)(a.p,{children:"Class diagrams are used to represent the structure of a system by showing its classes, attributes, methods, and the relationships between them. Here's an example of a simple class diagram:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\nclassDiagram\n    class Animal {\n        +String name\n        +int age\n        +void makeSound()\n    }\n    class Dog {\n        +String breed\n        +void bark()\n    }\n    class Cat {\n        +String color\n        +void meow()\n    }\n    Animal <|-- Dog\n    Animal <|-- Cat\n```\n"})}),"\n",(0,r.jsx)(a.p,{children:"This will render the following diagram:"}),"\n",(0,r.jsx)(a.mermaid,{value:"classDiagram\n    class Animal {\n        +String name\n        +int age\n        +void makeSound()\n    }\n    class Dog {\n        +String breed\n        +void bark()\n    }\n    class Cat {\n        +String color\n        +void meow()\n    }\n    Animal <|-- Dog\n    Animal <|-- Cat"}),"\n",(0,r.jsx)(a.h3,{id:"entity-relationship-diagrams-not-technically-uml-but-widely-used-in-software-design",children:"Entity-Relationship Diagrams (not technically UML, but widely used in software design)"}),"\n",(0,r.jsx)(a.p,{children:"Entity-Relationship diagrams are used to represent the relationships between entities in a database. Here's an example of a simple ER diagram:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n"})}),"\n",(0,r.jsx)(a.p,{children:"This will render the following diagram:"}),"\n",(0,r.jsx)(a.mermaid,{value:"erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses"}),"\n",(0,r.jsx)(a.p,{children:"You can also define entities with attributes primary keys and foreign keys:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\nerDiagram\n    CUSTOMER {\n        string name\n        string custNumber PK\n        string sector\n    }\n    ORDER {\n        int orderNumber PK\n        string deliveryAddress\n        string custNumber FK\n    }\n    CUSTOMER ||--o{ ORDER : places\n```\n"})}),"\n",(0,r.jsx)(a.mermaid,{value:"erDiagram\n    CUSTOMER {\n        string name\n        string custNumber PK\n        string sector\n    }\n    ORDER {\n        int orderNumber PK\n        string deliveryAddress\n        string custNumber FK\n    }\n    CUSTOMER ||--o{ ORDER : places"}),"\n",(0,r.jsx)(a.h2,{id:"behavioral",children:"Behavioral"}),"\n",(0,r.jsx)(a.h3,{id:"sequence-diagram",children:"Sequence Diagram"}),"\n",(0,r.jsx)(a.p,{children:"Sequence diagrams are used to represent interactions between different entities over time. Here's an example of a simple sequence diagram:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hello Bob, how are you?\nBob--\x3e>Alice: I am good thanks!\n```\n"})}),"\n",(0,r.jsx)(a.p,{children:"This will render the following diagram:"}),"\n",(0,r.jsx)(a.mermaid,{value:"sequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>Bob: Hello Bob, how are you?\n    Bob--\x3e>Alice: I am good thanks!"}),"\n",(0,r.jsx)(a.p,{children:"You can also represent participants and actors:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\nsequenceDiagram\n    actor  Alice\n    actor  Bob\n    Alice->>Bob: Hello Bob, how are you?\n    Bob--\x3e>Alice: I am good thanks!\n```\n"})}),"\n",(0,r.jsx)(a.mermaid,{value:"sequenceDiagram\n    actor  Alice\n    actor  Bob\n    Alice->>Bob: Hello Bob, how are you?\n    Bob--\x3e>Alice: I am good thanks!\n"}),"\n",(0,r.jsx)(a.h3,{id:"state-diagrams",children:"State Diagrams"}),"\n",(0,r.jsx)(a.p,{children:"State diagrams are used to represent the states of an object and the transitions between those states. Here's an example of a simple state diagram:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\nstateDiagram\n    [*] --\x3e Still\n    Still --\x3e [*]\n\n    Still --\x3e Moving\n    Moving --\x3e Still\n    Moving --\x3e Crash\n    Crash --\x3e [*]\n```\n"})}),"\n",(0,r.jsx)(a.p,{children:"This will render the following diagram:"}),"\n",(0,r.jsx)(a.mermaid,{value:"stateDiagram\n    [*] --\x3e Still\n    Still --\x3e [*]\n\n    Still --\x3e Moving\n    Moving --\x3e Still\n    Moving --\x3e Crash\n    Crash --\x3e [*]"}),"\n",(0,r.jsx)(a.h3,{id:"use-case-diagrams",children:"Use Case Diagrams"}),"\n",(0,r.jsx)(a.p,{children:"There is currently no official support for Use Case diagrams in Mermaid... maybe some day... until then you may have to resort to images from draw.io or similar tools."}),"\n",(0,r.jsx)(a.h2,{id:"non-uml-examples-architectural-diagrams",children:"Non UML Examples (Architectural Diagrams)"}),"\n",(0,r.jsxs)(a.p,{children:["UML is great for standardized diagrams, but there many diagrams that aren't covered by UML such as system block diagrams. Mermaid can also be used to create these types of diagrams. Theres 3 ways currently to draw system block diagrams in Mermaid (some of which are still in beta). Here's an example of a simple system block diagram using the ",(0,r.jsx)(a.code,{children:"graph"})," syntax:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\ngraph LR\n    A[Client] --\x3e B[Load Balancer]\n    B --\x3e C[Web Server 1]\n    B --\x3e D[Web Server 2]\n    C --\x3e E[Database]\n    D --\x3e E[Database]\n```\n"})}),"\n",(0,r.jsx)(a.mermaid,{value:"graph LR\n    A[Client] --\x3e B[Load Balancer]\n    B --\x3e C[Web Server 1]\n    B --\x3e D[Web Server 2]\n    C --\x3e E[Database]\n    D --\x3e E[Database]"}),"\n",(0,r.jsxs)(a.p,{children:["Graphs are great, but you have less control over the layout. If you want more control over the layout, you can use the ",(0,r.jsx)(a.code,{children:"block"})," syntax:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:'```mermaid\nblock\ncolumns 1\n  db(("DB"))\n  blockArrowId6<["&nbsp;&nbsp;&nbsp;"]>(down)\n  block:ID\n    A\n    B["A wide one in the middle"]\n    C\n  end\n  space\n  D\n  ID --\x3e D\n  C --\x3e D\n  style B fill:#969,stroke:#333,stroke-width:4px\n```\n'})}),"\n",(0,r.jsx)(a.mermaid,{value:'block\ncolumns 1\n  db(("DB"))\n  blockArrowId6<["&nbsp;&nbsp;&nbsp;"]>(down)\n  block:ID\n    A\n    B["A wide one in the middle"]\n    C\n  end\n  space\n  D\n  ID --\x3e D\n  C --\x3e D\n  style B fill:#969,stroke:#333,stroke-width:4px'}),"\n",(0,r.jsxs)(a.p,{children:["There is also a new ",(0,r.jsx)(a.code,{children:"architecture"})," syntax that is still in beta, but provides a more industry standard SaaS architecture layout great for cloud based systems:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-md",children:"```mermaid\narchitecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db\n```\n"})}),"\n",(0,r.jsx)(a.mermaid,{value:"architecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db"})]})}function m(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);